% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marvinParser.R
\name{marvinParser}
\alias{marvinParser}
\title{marvinParser}
\usage{
marvinParser(
  job_name,
  cores = 1,
  partition = "normal",
  memory = "8G",
  email = "clusterigtpmsubirana@gmail.com",
  modules = NULL,
  script,
  tmp_sh,
  stdout,
  stderr
)
}
\arguments{
\item{job_name}{Name of the job}

\item{cores}{Cores to use}

\item{partition}{partition where to run the script. By default 'partition'.}

\item{memory}{Amount of RAM used per cpu. By default '8G'.}

\item{email}{Email where to send notifications. By default 'clusterigtpmsubirana@gmail.com'}

\item{modules}{List of modules to load. Check the once that you need using module av command in Marvin.}

\item{script}{Script to run}

\item{tmp_sh}{File where to save the sh script in the host.}

\item{stdout}{File where standard output output go. Standard output contains all the messages that your job
has sent to the standard output messages, i.e. anything you see written.}

\item{stderr}{File where standard error output go. Standard error contains all the messages that your job has
sent to the error channel, i.e. “command not found”, “no such file or directory”…}
}
\value{
A job to Marvin cluster and the ib batch job as a message.
}
\description{
Parser for Marvin cluster
Using this parser is possible to send jobs from host to Marvin cluster through ssh
It is necessary generate a public and private key pair for an automatic scp
}
\examples{
\dontrun{
bam <- '/gpfs42/projects/lab_lpasquali/shared_data/marc/epimutations/raw/wgs/hg37/toDo/10759.bam'
sample <- basename(gsub('.bam','',bam))
job_name <- paste0(sample, '_realignBwa')
script <- paste('Rscript /gpfs42/projects/lab_lpasquali/shared_data/marc/repos/DNAseqPipeline/tmp/realignBwaParser.R',
                bam,
                ref,
                out_dir,
                threads)

email <- 'clusterigtpmsubirana@gmail.com'
tmp_sh <- file.path('/home/msubirana', paste0(job_name,'.sh'))
memory <- '32G'
#' stdout <- file.path(out_dir, job_name)
stderr <- file.path(out_dir, job_name)

marvinParser(job_name=job_name,
             cores=cores,
             modules=modules,
             script=script,
             tmp_sh=tmp_sh,
             memory=memory,
             stdout=stdout,
             stderr=stderr)
}

}
