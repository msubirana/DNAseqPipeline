multiqc <- '../../venv/multiqc/bin/python3'
qc_dir <- '../../epimutations/data/UMI4C/FASTQC'
multiqc_dir <- '../../epimutations/data/UMI4C/FASTQC/multiqc'
dir.create(multiqc_dir, showWarnings = FALSE)
system(paste(multiqc, qc_dir, '-o', multiqc_dir))
multiqc <- '../../venv/multiqc/bin/python3'
qc_dir <- '../../epimutations/data/UMI4C/FASTQC'
multiqc_dir <- '../../epimutations/data/UMI4C/FASTQC/multiqc'
dir.create(multiqc_dir, showWarnings = FALSE)
system(paste(multiqc, 'multiqc', qc_dir, '-o', multiqc_dir))
library(reticulate)
install.packages('reticulate')
library(reticulate)
use_virtualenv("../../venv/multiqc", required=TRUE)
multiqc
import('multiqc)
import('multiqc')
multiqc.run
multiqc.run(qc_dir)
import('multiqc')
multiqc.run(qc_dir)
multiqc <- import('multiqc')
multiqc.run(qc_dir)
multiqc <- '../../venv/multiqc/bin/multiqc'
qc_dir <- '../../epimutations/data/UMI4C/FASTQC'
multiqc_dir <- '../../epimutations/data/UMI4C/FASTQC/multiqc'
dir.create(multiqc_dir, showWarnings = FALSE)
system(paste(multiqc, 'multiqc', qc_dir, '-o', multiqc_dir))
system(paste(multiqc, qc_dir, '-o', multiqc_dir))
html <- list.files(multiqc_dir, pattern = 'html$', full.names = TRUE)
html
here::here(multiqc_dir)
html <- list.files(here::here(multiqc_dir), pattern = 'html$', full.names = TRUE)
html
here::here(multiqc_dir)
html <- list.files(here::here(multiqc_dir), pattern = 'html$', full.names = TRUE)
html
(here::here(multiqc_dir)
here::here(multiqc_dir)
html <- list.files(here::here(multiqc_dir), pattern = '.html$')
html
here::here(multiqc_dir)
here::here(html)
html <- list.files(multiqc_dir, pattern = 'html$', full.names = TRUE)
html
here::here(html)
html <- here::here(html)
html
qc_dir <- '../../epimutations/data/UMI4C/FASTQC'
htmls <- list.files(qc_dir, pattern = '_fastqc.html$', full.names = TRUE)
sample_names <- sub('_fastqc.html$', '', basename(htmls))
lane <- unlist(lapply(strsplit(dirname(htmls), "/"), function(x) paste0(gsub("FastQC", "", x[(length(x)-1):length(x)]), collapse="")))
out_names <- paste0(lane, ".html")
public_path <- '../public/reports_FastQC/UMI4Cats'
dir.create(public_path)
if (!all(file.exists(file.path(public_path, basename(htmls))))) {
res <- file.copy(from=htmls, to=file.path(public_path, basename(htmls)), overwrite=TRUE)
}
## Create links
urls <- list.files(public_path, pattern="*.html",full.names = TRUE)
df <- data.frame("Sample" = gsub(".html", "", basename(urls)),
"QC report" = paste0("[FastQC Report](", urls, ")"))
knitr::kable(df, caption="FastQC reports for each FastQ read file.")
## Copy necessary files to public
qc_dir <- '../../epimutations/data/UMI4C/FASTQC'
htmls <- list.files(qc_dir, pattern = '_fastqc.html$', full.names = TRUE)
sample_names <- sub('_fastqc.html$', '', basename(htmls))
lane <- unlist(lapply(strsplit(dirname(htmls), "/"), function(x) paste0(gsub("FastQC", "", x[(length(x)-1):length(x)]), collapse="")))
out_names <- paste0(lane, ".html")
public_path <- '../public/reports_FastQC/UMI4Cats'
dir.create(public_path)
if (!all(file.exists(file.path(public_path, basename(htmls))))) {
res <- file.copy(from=htmls, to=file.path(public_path, basename(htmls)), overwrite=TRUE)
}
## Create links
urls <- list.files(public_path, pattern="*.html",full.names = TRUE)
urls
here::here(urls)
.data <- here::here("data/CT_H3K27ac")
.out <- here::here("output/CUTTAG_QC")
dir.create(.out, F)
dirs <- list.dirs(file.path(.data, "FastQC"))
dirs <- dirs[grepl("R._fastqc$", dirs)]
htmls <- file.path(dirs, "fastqc_report.html")
lane <- unlist(lapply(strsplit(dirname(htmls), "/"), function(x) paste0(gsub("FastQC", "", x[(length(x)-1):length(x)]), collapse="")))
out_names <- paste0(lane, ".html")
if (!all(file.exists(file.path(here::here("public/reports_FastQC/CUTTAG", out_names))))) {
res <- file.copy(from=htmls, to=file.path(here::here("public/reports_FastQC/CUTTAG", out_names)), overwrite=TRUE)
}
## Create links
htmls_rep <- list.files(here::here("public/reports_FastQC/CUTTAG"), pattern="*.html")
urls <- file.path("reports_FastQC/CUTTAG", htmls_rep)
urls
## Copy necessary files to public
dirs <- list.dirs(file.path(.data, "FastQC"))
dirs
## Directories
.data <- here::here("data/CT_H3K27ac")
.out <- here::here("output/CUTTAG_QC")
dir.create(.out, F)
## Copy necessary files to public
dirs <- list.dirs(file.path(.data, "FastQC"))
dirs
here::here()
here::here()
()
here::here()
getwd()
multiqc_dir <- '../../epimutations/data/UMI4C/FASTQC/multiqc'
html <- list.files(multiqc_dir, pattern = 'html$', full.names = TRUE)
public_path <- '../public/reports_FastQC/UMI4Cats'
dir.create(public_path)
file.copy(from=html, to=file.path(public_path, basename(html)), overwrite=TRUE)
file.path(public_path, basename(html))
here::here(file.path(public_path, basename(html)))
knitr::opts_chunk$set(echo = TRUE,
fig.algn = "center",
warning = FALSE,
message = FALSE)
library(UMI4Cats)
library(FourCSeq)
library(tidyr)
getwd()
name_RE <- 'CIITA'
wk_dir_count <- file.path('../data/UMI4C/UMI4Cats', name_RE, 'count')
# create umi4c obj
files <- list.files(wk_dir_count,
pattern = "*_counts.tsv.gz",
full.names = TRUE
)
colData <- data.frame(
sampleID = gsub("_counts.tsv.gz", "", basename(files)),
file = files,
stringsAsFactors = FALSE
)
colData <- colData %>%
separate(sampleID, sep='_',
into = c('condition', 'replicate', 'viewpoint'),
remove = FALSE
)
umi <- makeUMI4C(
colData = colData,
viewpoint_name = "CIITA",
grouping = "condition",
bait_expansion = 2e6
)
# generate windows
win_frags <- makeWindowFragments(umi, n_frags=8, sliding=1)
devtools::load_all('~/Documents/phd/repos/UMI4Cats/')
name_RE <- 'CIITA'
wk_dir_count <- file.path('../data/UMI4C/UMI4Cats', name_RE, 'count')
# create umi4c obj
files <- list.files(wk_dir_count,
pattern = "*_counts.tsv.gz",
full.names = TRUE
)
colData <- data.frame(
sampleID = gsub("_counts.tsv.gz", "", basename(files)),
file = files,
stringsAsFactors = FALSE
)
colData <- colData %>%
separate(sampleID, sep='_',
into = c('condition', 'replicate', 'viewpoint'),
remove = FALSE
)
umi <- makeUMI4C(
colData = colData,
viewpoint_name = "CIITA",
grouping = "condition",
bait_expansion = 2e6
)
win_frags <- makeWindowFragments(umi, n_frags=8, sliding=1)
# significant windows using zcore
umi_win_frags <- combineUMI4C(umi, win_frags)
dds <- UMI4Cats:::UMI4C2dds(umi4c = umi_win_frags, design = ~condition)
dds <- UMI4Cats:::vstUMI4C(dds = dds)
dds <- UMI4Cats:::smoothMonotoneUMI4C(dds = dds)
dds <- ZscoreUMI4C(dds)
dds <- addPeaksUMI4C(dds)
# select significant peaks (if any sample or replicate are significant, the peak is signficiant)
sig_peaks <- rowData(dds)['id'][,1][apply(assays(dds)[["peaks"]], 1, any)]
df_peaks <- data.frame(rowRanges(dds))
df_peaks <- df_peaks[c(1:4,6)]
df_peaks[df_peaks$id %in% sig_peaks,]
df_peaks_sig <- df_peaks[df_peaks$id %in% sig_peaks,]
df_peaks_sig
df_peaks_sig
# define query regions based on zscore
gr_peaks_sig <- makeGRangesFromDataFrame(df_peaks_sig, keep.extra.columns = TRUE)
sig_peaks <- rowData(dds)['id'][,1][apply(assays(dds)[["peaks"]], 1, any)]
df_peaks <- data.frame(rowRanges(dds))
df_peaks <- df_peaks[c(1:4,6)]
df_peaks$type <- 'non_sig'
df_peaks_sig <- df_peaks[df_peaks$id %in% sig_peaks,]
# define query regions based on zscore
gr_peaks_sig <- makeGRangesFromDataFrame(df_peaks_sig, keep.extra.columns = TRUE)
# differential test
umi_wald <- waldUMI4C(umi, query_regions = gr_peaks_sig)
umi_wald
resultsUMI4C(umi_wald)
resultsUMI4C(umi_wald)$padj
gr_peaks_sig
?ZscoreUMI4C
win_frags <- makeWindowFragments(umi, n_frags=8, sliding=1)
# significant windows using zcore
umi_win_frags <- combineUMI4C(umi, win_frags)
dds <- UMI4Cats:::UMI4C2dds(umi4c = umi_win_frags, design = ~condition)
dds <- UMI4Cats:::vstUMI4C(dds = dds)
dds <- UMI4Cats:::smoothMonotoneUMI4C(dds = dds)
dds <- ZscoreUMI4C(dds)
dds <- addPeaksUMI4C(dds, fdr_thresh=0.01)
sig_peaks <- rowData(dds)['id'][,1][apply(assays(dds)[["peaks"]], 1, any)]
df_peaks <- data.frame(rowRanges(dds))
df_peaks <- df_peaks[c(1:4,6)]
df_peaks_sig <- df_peaks[df_peaks$id %in% sig_peaks,]
# define query regions based on zscore
gr_peaks_sig <- makeGRangesFromDataFrame(df_peaks_sig, keep.extra.columns = TRUE)
gr_peaks_sig
nrow(gr_peaks_sig)
length(gr_peaks_sig)
# differential test
umi_wald <- waldUMI4C(umi, query_regions = gr_peaks_sig)
resultsUMI4C(umi_wald)
resultsUMI4C(umi_wald)$padj
table(resultsUMI4C(umi_wald)$padj)
umi4c=umi
query_regions = gr_peaks_sig
subset="sum"
design=~condition
normalized = TRUE
padj_method = "fdr"
padj_threshold = 0.05
if(!is.null(query_regions)) {
if (subset=="overlap") umi4c <- subsetByOverlaps(umi4c, query_regions)   # Option 1: by overlaps
else if (subset=="sum") umi4c <- combineUMI4C(umi4c, query_regions)   # Option 2: sum
}
## Convert to dds
dds <- UMI4C2dds(umi4c=umi4c,
design=design)
# differential test
umi_wald <- waldUMI4C(umi, query_regions = gr_peaks_sig, subset = 'sum')
umi_wald
resultsUMI4C(umi_wald)
resultsUMI4C(umi_wald)$padj
lapply(resultsUMI4C(umi_wald)$padj, format(round(x, 2), nsmall = 2)
)
lapply(resultsUMI4C(umi_wald)$padj, function(x) format(round(x, 2), nsmall = 2)
)
unlist(lapply(resultsUMI4C(umi_wald)$padj, function(x) format(round(x, 3), nsmall = 2)))
# plot
plotUMI4C(umi_wald, ylim = c(0, 10), grouping="condition")
umi4c=umi_wald
grouping = "condition"
dgram_function = "quotient"
dgram_plot = TRUE
colors = NULL
xlim = NULL
ylim = c(0, 10)
TxDb = TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene
longest = TRUE
rel_heights = c(0.25, 0.4, 0.12, 0.23)
font_size = 14
## Add grouping if not present
if (length(groupsUMI4C(umi4c)))
## Define xlim if null
if (is.null(xlim)) {
xlim <- c(
GenomicRanges::start(metadata(umi4c)$region),
GenomicRanges::end(metadata(umi4c)$region)
)
}
if (is.null(ylim)) ylim <- c(0, max(trend(umi4c)$trend, na.rm = TRUE))
## Get colors
factors <- getFactors(umi4c, grouping=grouping)
factors
if (!is.null(grouping)) {
umi4c <- groupsUMI4C(umi4c)[[grouping]]
}
factors <- unique(colnames(assay(umi4c)))
factors <- factors[c(
which(factors == metadata(umi4c)$ref_umi4c),
which(factors != metadata(umi4c)$ref_umi4c)
)]
if (is.null(colors)) colors <- getColors(factors)
## Set dgram_plot to FALSE if there are more than 2 factors
if (length(dgram(umi4c)) == 1 | length(factors) > 2) dgram_plot <- FALSE
## Plot trend
trend_plot <- plotTrend(umi4c,
grouping = grouping,
xlim = xlim,
ylim = ylim,
colors = colors
)
## Plot genes
genes_plot <- plotGenes(
window = metadata(umi4c)$region,
TxDb = TxDb,
longest = longest,
xlim = xlim
)
TxDb
metadata(umi4c)$region
longest
xlim
## Plot domainogram
if (dgram_plot) {
domgram_plot <- plotDomainogram(umi4c,
grouping = grouping,
dgram_function = dgram_function,
colors = colors,
xlim = xlim
)
} else {
domgram_plot <- NA
}
## Plot differential results
if (length(umi4c@results) > 0) {
diff_plot <- plotDifferential(umi4c,
grouping = grouping,
colors = colors,
xlim = xlim
)
} else {
diff_plot <- NA
}
## Generate list of plots
plot_list <- list(
genes = genes_plot,
trend = trend_plot,
diff = diff_plot,
dgram = domgram_plot
)
## Remove empty plots
keep_plots <- !is.na(plot_list)
if (length(rel_heights) != sum(keep_plots)) {
rel_heights <- rel_heights[keep_plots]
if (rel_heights[length(rel_heights)] < 0.25) rel_heights[length(rel_heights)] <- 0.25
rel_heights <- round(rel_heights/sum(rel_heights), 2)
}
plot_list <- plot_list[keep_plots]
## Extract legends and plot them separately
legends <- lapply(plot_list[-1], cowplot::get_legend)
legends_plot <- cowplot::plot_grid(plotlist = legends, nrow = 1, align = "h")
## Remove legends from plot
plot_list <- formatPlotsUMI4C(plot_list = plot_list, font_size = font_size)
## Plot main
main_plot <- cowplot::plot_grid(
plotlist = plot_list,
ncol = 1,
align = "v",
rel_heights = rel_heights
)
## Plot UMI4C
cowplot::plot_grid(legends_plot,
main_plot,
ncol = 1,
rel_heights = c(0.15, 0.85)
)
# plot
UMI4Cats::plotUMI4C(umi_wald, ylim = c(0, 10), grouping="condition")
edit(addPeaksUMI4C)
name_RE <- 'CIITA'
wk_dir_count <- file.path('../data/UMI4C/UMI4Cats', name_RE, 'count')
# create umi4c obj
files <- list.files(wk_dir_count,
pattern = "*_counts.tsv.gz",
full.names = TRUE
)
colData <- data.frame(
sampleID = gsub("_counts.tsv.gz", "", basename(files)),
file = files,
stringsAsFactors = FALSE
)
colData <- colData %>%
separate(sampleID, sep='_',
into = c('condition', 'replicate', 'viewpoint'),
remove = FALSE
)
umi <- makeUMI4C(
colData = colData,
viewpoint_name = "CIITA",
grouping = "condition",
bait_expansion = 2e6
)
win_frags <- makeWindowFragments(umi, n_frags=10, sliding=1)
# significant windows using zcore
umi_win_frags <- combineUMI4C(umi, win_frags)
dds <- UMI4Cats:::UMI4C2dds(umi4c = umi_win_frags, design = ~condition)
dds <- UMI4Cats:::vstUMI4C(dds = dds)
dds <- UMI4Cats:::smoothMonotoneUMI4C(dds = dds)
dds <- ZscoreUMI4C(dds)
dds <- addPeaksUMI4C(dds, fdr_thresh=0.01)
# select significant peaks (if any sample or replicate are significant, the peak is signficiant)
sig_peaks <- rowData(dds)['id'][,1][apply(assays(dds)[["peaks"]], 1, any)]
df_peaks <- data.frame(rowRanges(dds))
df_peaks <- df_peaks[c(1:4,6)]
df_peaks_sig <- df_peaks[df_peaks$id %in% sig_peaks,]
# define query regions based on zscore
gr_peaks_sig <- makeGRangesFromDataFrame(df_peaks_sig, keep.extra.columns = TRUE)
# differential test
umi_wald <- waldUMI4C(umi, query_regions = gr_peaks_sig, subset = 'sum')
devtools::load_all('~/Documents/phd/repos/UMI4Cats')
#creat ssh sesison
ssh_connection <- ssh::ssh_connect('msubirana@marvin.s.upf.edu')
#load packages
devtools::load_all('~/Documents/phd/repos/DNAseqPipeline/')
#load packages
devtools::load_all('~/Documents/phd/repos/DNAseqPipeline/')
dir.create('../tmp_sh', showWarnings = FALSE)
#define variables
ref <- '/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/ref/GCA_000001405.15_GRCh38_no_alt_analysis_set.fa'
bam_path <- '/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/marc/insulinomas/data/WGS/BAM/toDo'
out_dir <- '/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/marc/insulinomas/data/WGS/BAM'
threads <- 8
cores=threads/2
modules <- c('BWA/0.7.17-foss-2016b',
'samblaster/0.1.24-foss-2016b',
'SAMtools/1.9-HTSlib-1.8-foss-2016b',
'R/3.4.2-foss-2016b')
bams
ls_output <- ssh::ssh_exec_internal(ssh_connection, command = paste('ls', bam_path))
bams_tmp <- unlist(strsplit(rawToChar(ls_output$stdout), '\n'))
bams_tmp <- bams_tmp[grepl('.bam$', bams_tmp)]
bams <- file.path(bam_path,bams_tmp)
bams
#realign bams using BWA
for(bam in bams){
sample <- basename(gsub('.bam','',bam))
job_name <- paste0(sample, '_realignBwa', "_", Sys.Date())
script <- paste('Rscript /gpfs42/projects/lab_lpasquali/shared_data/marc/repos/DNAseqPipeline/tmp/realignBwaParser.R',
bam,
ref,
out_dir,
threads)
email <- 'clusterigtpmsubirana@gmail.com'
tmp_sh <- file.path('../tmp_sh', paste0(job_name,'.sh'))
memory <- '64G'
stdout <- file.path(out_dir, job_name)
stderr <- file.path(out_dir, job_name)
marvinParser(job_name=job_name,
cores=cores,
modules=modules,
script=script,
tmp_sh=tmp_sh,
memory=memory,
stdout=stdout,
stderr=stderr)
}
setwd('~/Documents/phd/repos/DNAseqPipeline/')
ref='/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/ref/GCA_000001405.15_GRCh38_no_alt_analysis_set.fa'
conf_manta='configManta.py'
bam='a.bam'
call_regions='/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/ref/callRegions.bed.gz'
paste(conf_manta,
"--normalBam", normal_file,
"--tumorBam", tumor_file,
"--referenceFasta", ref,
"--runDir", out_manta)
tumor_bam='tumor.bam'
ctrl_bam='ctrl.bam'
paste(conf_manta,
"--normalBam", ctrl_bam,
"--tumorBam", tumor_bam,
"--referenceFasta", ref,
"--runDir", out_manta)
out_manta='.'
paste(conf_manta,
"--normalBam", ctrl_bam,
"--tumorBam", tumor_bam,
"--referenceFasta", ref,
"--runDir", out_manta)
ctrl_bam='NET10_BL.bam'
tumor_bam='NET10_TI.bam'
paste(conf_manta,
"--normalBam", ctrl_bam,
"--tumorBam", tumor_bam,
"--referenceFasta", ref,
"--runDir", out_manta)
ssh_connection <- ssh::ssh_connect('msubirana@marvin.s.upf.edu')
#load packages
devtools::load_all('~/Documents/phd/repos/DNAseqPipeline/')
ssh_connection <- ssh::ssh_connect('msubirana@marvin.s.upf.edu')
#load packages
devtools::load_all('~/Documents/phd/repos/DNAseqPipeline/')
dir.create('../tmp_sh', showWarnings = FALSE)
#define variables
ref <- '/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/ref/GCA_000001405.15_GRCh38_no_alt_analysis_set.fa'
bam_path <- '/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/marc/insulinomas/data/WGS/BAM/toSomaticCalling'
out_dir_manta <- '/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/marc/insulinomas/data/WGS/VCF/manta'
out_dir_strelka2 <- '/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/marc/insulinomas/data/WGS/VCF/strelka2'
cores <- 1
call_regions <- '/gpfs42/robbyfs/scratch/lab_lpasquali/msubirana/ref/callRegions.bed.gz'
modules <- c('Strelka/2.9.10.centos6_x86_64',
'manta/1.6.0.centos6_x86_64',
'R/4.0.0-foss-2020a')
#get BAMs to do over ssh connection
log_out <- bam_path
#get BAMs to do over ssh connection
ls_output <- ssh::ssh_exec_internal(ssh_connection, command = paste('ls', bam_path))
bams_tmp <- unlist(strsplit(rawToChar(ls_output$stdout), '\n'))
bams_tmp <- bams_tmp[grepl('.bam$', bams_tmp)]
bams <- file.path(bam_path,bams_tmp)
tmp_sh <- '/home/msubirana/Documents/phd/projects/epimutations/tmp_sh'
bams
grep('_TI', bams)
bams[grep('_TI', bams)]
tumor_bams <- bams[grep('_TI', bams)]
tumor_bam <- tumor_bams[1]
tumor_bams
tumor_bam
gsub('_TI.bam', '_BL.bam', tumor_bam)
